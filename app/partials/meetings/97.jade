div
    .section(page='1')
        .centered
            .container
                .row
                    .span12
                        h4 97 spotkanie WJUGa
                        h2 Java jada RAM. Ile pamięci zjada Java? 
                        h3 Michał Kosmulski 
                        p Termin: 19.06.2012 godz. 18:00
                        p Lokalizacja: MIMUW, sala 3180
                        p 
                        span Sponsor: 
                        a(href='http://netsprint.eu/', target='_blank') NetSprint 
                        p
                        strong Materiały
                        ul
                            li 
                                a(href='https://docs.google.com/open?id=0B3sikUV-sttFLWFsdWxXMVJuc1k', target='_blank') slajdy pdf
                            li 
                                a(href='https://docs.google.com/open?id=0B3sikUV-sttFU1BaUm1XTmR3SzA', target='_blank') slajdy odp
                        strong Dyskusja:
                        ul
                            li 
                                a(href='https://groups.google.com/forum/#!topic/warszawa-jug/Uu39iMBgIX4', target='_blank') dyskusja
                        h3 O wykładzie:
                        p Każda aplikacja wymaga do działania pewnej ilości pamięci. W wielu sytuacjach wymagania pamięciowe są niewielkie i nie stanowią żadnego problemu, ale bywa i tak, że aplikacja przynajmniej w niektórych momentach wymaga pamięci dużo. Pomimo, że RAM jest coraz tańszy, dokładanie do serwera kolejnych kości nie zawsze jest praktycznym rozwiązaniem. Podczas prezentacji postaram się pokazać kiedy i dlaczego warto zadbać o efektywność pamięciową oraz w jaki sposób można pisząc aplikacje w Javie unikać pamięciowej rozrzutności. Przy okazji opowiem, w jaki sposób zaimplementowane są pewne struktury danych w popularnej JVM od Suna/Oracle, co pozwoli porównać zużycie pamięci przez aplikację napisaną w Javie z jej odpowiednikiem napisanym np. w C++. Choć temat jest związany z zarządzaniem pamięcią, Garbage Collector pojawi się tylko w pobocznym wątku, w którym wskażę kilka sposobów na uzyskanie w Javie efektu wycieku pamięci. Wymienię też kilka bibliotek udostępniających klasy kolekcji i krótko opowiem, czym różnią się one pomiędzy sobą oraz dlaczego czasem warto ich użyć zamiast standardowych kolekcji Javy. 
                        h3 O prelegencie:
                        p Michał Kosmulski pracuje w firmie NetSprint, gdzie kieruje rozwojem USE - silnika wyszukiwawczego wykorzystywanego w rozwiązaniach korporacyjnych oraz przez system monitoringu internetu Newspoint. Wynika z tego zainteresowanie problemami wydajności na wszystkich poziomach: od sprzętu, systemów operacyjnych i maszyn wirtualnych po algorytmy i techniki kodowania. Za szczególnie ważne uważa łączenie niezbędnych optymalizacji z troską o zachowanie wygody użytkowników oraz wysokiej jakości kodu.
                        p
                            <iframe width="853" height="480" src="http://www.youtube.com/embed/bPfTmjGnXBw" frameborder="0" allowfullscreen></iframe>
